import React, { Component } from 'react'
import { GC_USER_ID } from '../constants'
import { timeDifferenceForDate } from '../utils'
import { graphql,compose } from 'react-apollo'
import gql from 'graphql-tag'
import { Switch, Route, Redirect } from 'react-router-dom'
import { withRouter } from 'react-router'
import { Link } from 'react-router-dom'


import {
  Table,
  TableBody,
  TableHeader,
  TableHeaderColumn,
  TableRow,
  TableRowColumn,
} from 'material-ui/Table';


class Profile extends Component {
  render() {
    const userId = localStorage.getItem(GC_USER_ID)
    console.log('userId')
    console.log(userId)

    console.log(user)

    console.log("find user")
    console.log(user)


    console.log("found")
    console.log(user)

    if (this.props.allUsersQuery && this.props.allUsersQuery.loading) {
      return <div>Loading</div>
    }

    if (this.props.allUsersQuery && this.props.allUsersQuery.error) {
      console.log(this.props.allUsersQuery.error)
      return <div>Error</div>
    }    const user ={}
    const userId = localStorage.getItem(GC_USER_ID)
    console.log('userId')
    console.log(userId)
    const user = this.props.findUserQuery.findUser({
        variables: {
        userId
      }
    })
    console.log("find user")
    console.log(user)

    //all users then traverse till you find specific user
    const result = this.props.allUsersQuery.allUsers
    console.log(result)

    const len = result.length
    console.log("len")
    console.log(len)
    //for (var i = 0; i < len; i++) {
    //  if(result[i].id===userId)
    //{
    //    user=result[i]
    //  }
    //}
    console.log("found")
    console.log(user)
    return (
      <div>
      <div >
        ID:{user.id}
        Name:{user.name}
        Email:{user.email}
        No.Of Products Submitted:
        No. Of Offers Created:
      </div>
      <div>
        Products:
        <Table>
          <TableHeader>
            <TableRow>
              <TableHeaderColumn>ID</TableHeaderColumn>
              <TableHeaderColumn>Name</TableHeaderColumn>
              <TableHeaderColumn>No. Of. Votes</TableHeaderColumn>
              <TableHeaderColumn>No. Of. Offers</TableHeaderColumn>
            </TableRow>
          </TableHeader>
          <TableBody>
            <TableRow>
              <TableRowColumn>1</TableRowColumn>
              <TableRowColumn>John Smith</TableRowColumn>
              <TableRowColumn>Employed</TableRowColumn>
            </TableRow>
            <TableRow>
              <TableRowColumn>2</TableRowColumn>
              <TableRowColumn>Randal White</TableRowColumn>
              <TableRowColumn>Unemployed</TableRowColumn>
            </TableRow>
            <TableRow>
              <TableRowColumn>3</TableRowColumn>
              <TableRowColumn>Stephanie Sanders</TableRowColumn>
              <TableRowColumn>Employed</TableRowColumn>
            </TableRow>
            <TableRow>
              <TableRowColumn>4</TableRowColumn>
              <TableRowColumn>Steve Brown</TableRowColumn>
              <TableRowColumn>Employed</TableRowColumn>
            </TableRow>
            <TableRow>
              <TableRowColumn>5</TableRowColumn>
              <TableRowColumn>Christopher Nolan</TableRowColumn>
              <TableRowColumn>Unemployed</TableRowColumn>
            </TableRow>
          </TableBody>
        </Table>

      </div>
      </div>
    )
}
    _getUserToRender = (userId) => {
      const userToRender = this.props.findUserQuery.findUser({
        variables: {
        userId,
      }
    })
    return userToRender

    }

  }


// why wont findUseQuery(ID) wont work
const FIND_USER_QUERY = gql`
  query FindUserQuery($userId: ID) {
    User(id: $userId) {
      id
      name
      email
      createdAt
      links{
        id
        title
        offers{
          id
          amount
          comments{
            id
            content
          }
        }
        votes{
          id
        }
      }

    }
  }
`


const ALL_USERS_QUERY = gql`
  query AllUsersQuery{
    allUsers {
      id
      name
      email
      createdAt
      links{
        id
        title
        url
        description
        createdAt
        offers{
          id
          amount
          comments{
            id
            content
          }
        }

      }
    }
  }
`
//how to make single queries work
//export default graphql(USER_QUERY,{name:'findUserQuery'}) (Profile)
export default compose(
  graphql(ALL_USERS_QUERY, {name:'allUsersQuery'}),
  graphql(FIND_USER_QUERY, { name: 'findUserQuery' })
)(Profile)
Pro
